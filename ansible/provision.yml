---
- hosts: parmenides
  vars:
    lein_dir: /usr/local/bin/lein
    project_name: parmenides
    project_root: /var/projects/parmenides
    project_repo: ssh://git@github.com/sunlightlabs/parmenides.git
    
    datomic_version: "0.9.5130"
    datomic_dir: /var/lib/datomic
    datomic_data_dir: /var/lib/datomic/data
    datomic_filename: datomic-free-{{ datomic_version }}  

  sudo: yes 
  tasks:
    - name: Get the tools
      apt: pkg={{ item }} update_cache=yes
      sudo: yes
      with_items:
        - git
        - openjdk-7-jre-headless
        - wget
        - unzip
        - sendmail  
        - emacs
        - curl          
        - htop
        - iftop
        - iotop  
        - pciutils
        - sysstat
        - tmux
        - tshark  
        - openjdk-7-jdk  
    
    - name: Create the project directory.      
      file: state=directory path={{ project_root }}
    
    - name: Create user.
      user: home={{ project_root }}/home/ name={{ project_name }} state=present

    - name: Project directory permissions.      
      file: state=directory path={{ project_root }} owner={{ project_name }} group={{ project_name }}    

    - name: Update the project directory.
      file: group={{ project_name }} owner={{ project_name }} mode=755 state=directory path={{ project_root }}
    
    - name: Create the code directory.
      file: group={{ project_name }} owner={{ project_name }} mode=755 state=directory path={{ project_root }}/code/


    - name: echo
      shell: ls ~/.ssh
      register: result

    - debug: var=result

    - name: echo
      shell: whoami
      register: result

    - debug: var=result

    - name: Clone parmenides. 
      git: repo={{ project_repo }} dest={{ project_root }}/code/ accept_hostkey=True
      
       

    - name: Get leiningen
      get_url: url=https://raw.github.com/technomancy/leiningen/stable/bin/lein dest={{ lein_dir }}
    - name: Leiningen permissions
      file: path={{ lein_dir }} mode=0755
      
    # - name: Upload web app upstart config file
    #   copy: src=files/{{ project_name }}-upstart.conf dest=/etc/init/{{ project_name }}.conf
      
    - name: Make app log directory
      file: state=directory path=/var/log/{{ project_name }} owner={{ project_name }} group={{ project_name }}
        
  
    - name: Create datomic user.
      user: name=datomic state=present
      
    - name: Create datomic data directory
      file: state=directory path={{ datomic_data_dir }} owner=datomic group=datomic
      
    - name: Make datomic log directory
      file: state=directory path=/var/log/datomic owner=datomic group=datomic
      
    - name: Check datomic installation
      command: "ls {{ datomic_dir }}/{{ datomic_filename }}"
      register: datomic_exists
      ignore_errors: true

    - name: Create datomic directory
      file: state=directory path={{ datomic_dir }} owner=datomic group=datomic
      when: datomic_exists|failed

    - name: Transfer datomic      
      copy: src=files/{{ datomic_filename }}.zip dest={{ datomic_dir }}/{{ datomic_filename }}.zip
      when: datomic_exists|failed

    - name: Unpack datomic
      command: chdir={{ datomic_dir }} unzip {{ datomic_filename }}.zip
      when: datomic_exists|failed

    - name: datomic dir permissions
      shell: chown -R datomic:datomic {{ datomic_dir }}/{{ datomic_filename }}
      
    - name: Upload datomic properties file
      copy: src=files/datomic-transactor.properties dest={{ datomic_dir }}/transactor.properties
    
    - name: Upload datomic upstart config file
      copy: src=files/datomic-upstart.conf dest=/etc/init/datomic.conf
      
    - name: Link datomic
      file: src={{ datomic_dir }}/{{ datomic_filename }}
            dest={{ datomic_dir }}/runtime
            owner=datomic
            group=datomic
            state=link
      when: datomic_exists|failed

    - name: ensure datomic is running
      service: name=datomic state=started

      
